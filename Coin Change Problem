class Solution {
    public long count(int coins[], int N, int sum) {
        
             long [][] dp= new long [N+1][sum+1];
        for(int i=0; i<=N; i++){
            for(int j=0; j<= sum; j++){
                dp[i][j]=-1;
            }
        }
        return helper(coins, N, sum, dp);
    }
    
    
    private static long helper(int coins[], int N, int sum, long [][] dp){
        if(N==0){
            return 0;
        }
        
        if(sum<0){
            return 0;
        }
        
        if(sum==0){
            return 1;
        }
        
        
        if(dp[N][sum]!=-1){
            return dp[N][sum];
        }
        
        if(sum>=coins[N-1]){
            dp[N][sum]=helper(coins, N, sum-coins[N-1], dp)+helper(coins, N-1, sum, dp);
        }
        
        else{
            dp[N][sum]=helper(coins, N-1, sum, dp);
        }
        
        return dp[N][sum];
    }
}
