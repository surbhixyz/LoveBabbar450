class Solution{
    static int maxGold(int n, int m, int M[][])
    {
        int [][] dp= new int [n][m];
        for(int i=0; i<n;i++){
            for(int j=0; j<m;j++){
                dp[i][j]=-1;
            }
        }
        int maxProfit=0;
        for(int i=0; i<n; i++){
                int ans=helper(n,m,M,i,0,dp);               //any row, column=0
                maxProfit=Math.max(maxProfit,ans);
        }
        return maxProfit;
    }
    
    
    private static int helper(int n, int m, int [][] M, int i, int j, int [][]dp){
        if(i<0 || i==n || j==m){
            return 0;
        }
        
        if(dp[i][j]!=-1){
            return dp[i][j];
        }
        
       
        dp[i][j]=M[i][j]+Math.max(helper(n,m,M,i, j+1, dp), Math.max(helper(n,m,M,i+1, j+1, dp), helper(n,m,M,i-1, j+1, dp)));
        
        return dp[i][j];
    }
  
}
