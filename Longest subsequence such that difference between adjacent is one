class Solution{
    // Method 1
    
    static int longestSubsequence(int n, int A[])
    {
        int[] dp = new int[n];
        int res = 1;
        for(int i = 0; i < n; i++) {
            dp[i] = 1;
            for(int j = i - 1; j >= 0; j--) {
                if(Math.abs(A[i] - A[j]) == 1)
                    dp[i] = Math.max(dp[i], dp[j] + 1);
            }
            res = Math.max(res, dp[i]);
        }
        return res;
    }
    
    // Method 2
    
    // static int longestSubsequence(int n, int A[])
    // {
    //     int[] dp = new int[n];
    //     int res = 1;
    //     for(int i = 0; i < n; i++) {
    //         dp[i] = 1;
    //         for(int j = i - 1; j >= 0; j--) {
    //             if(Math.abs(A[i] - A[j]) == 1)
    //                 dp[i] = Math.max(dp[i], dp[j] + 1);
    //         }
    //         res = Math.max(res, dp[i]);
    //     }
    //     return res;
    // }
    
}
